geom_pointrange(position = position_jitter(width = 0.2, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.1, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.1, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.1, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.1, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.1, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.1, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.1, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.1, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.1, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.1, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.1, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.1, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.15, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.15, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.15, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.2, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.2, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.2, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.2, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.2, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.2, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.2, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.2, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.2, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.2, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
ggplot(bias_summary_d, aes(x=Condition, y=Mean_Difference, group=Literacy_Group, color=Literacy_Group)) +
geom_pointrange(position = position_jitter(width = 0.2, height = 0), aes(ymin = Mean_Difference-SE_Bias, ymax = Mean_Difference+SE_Bias))
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
library(tidyverse) # for data munging
library(knitr) # for kable table formating
library(haven) # import and export 'SPSS', 'Stata' and 'SAS' Files
library(readxl) # import excel files
d <- read_sav('data/Empathy Gap Study 1 data.sav')
View(d)
names(d)
tail(d)
view(d$condition)
tiny_demo_d
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
d$Game1Angry1 %>% unique()
tail(d)
filtered_d = d %>%
filter(is.na(DoNotUse))
filtered_d$DoNotUse %>% unique()
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d %>%
select(-contains("Game"))
performance_hyp_d
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d %>% pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Rating')
head(rating_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d %>%
mutate(ConfrontationalGame = grepl("SOF", Measurement), # create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement), # creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))) # Get rid of uninterpretable condition labels
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
IsRecall = grepl("Friends|Strangers", Measurement),
)
rating_hyp_long_d
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
ConfrontationalGame = GameNumber <= 2, # in a mutate, we can use a column we created (or changed) right away. Games 1 and 2 are confrontational, games 3 and 4 are not.
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
Emotion = ifelse(Emotion == "Excited", "Exciting", # this just gets rid of some annoying labeling choices
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
performance_hyp_long_d %>%
group_by(ConfrontationalGame) %>%
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) %>%
ungroup()
rating_summary_d = rating_hyp_long_d %>%
group_by(Emotion, ConfrontationalGame) %>%
summarize(MeanRating = mean(Rating, na.rm=T))
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
model = lm(Rating ~ ConfrontationalGame * Emotion, rating_hyp_long_d)
summary(model)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition) %>%
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T))
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_model = lm(ImprovementScore ~ ConfrontationalGame * MusicCondition, performance_diff_d)
summary(performance_model)
names(d)
d <- read_sav('data/Empathy Gap Study 1 data.sav')
names(d)
d_exchangeinfo = d %>%
select(c("ID", "conditon", "exchangeinfo")
view(d_exchangeinfo)
View(d_exchangeinfo)
d_exchangeinfo = d %>%
select(c("ID", "conditon", "exchangeinfo")
d_exchangeinfo = d %>%
d_exchangeinfo = d %>%
select(c("ID", "conditon", "exchangeinfo"))
d_exchangeinfo = d %>%
select(c("ID", "condition", "exchangeinfo"))
view(d_exchangeinfo)
view(d_exchangeinfo)
d <- read_sav('data/Empathy Gap Study 1 data.sav')
names(d)
d_exchangeinfo = d %>%
select(c("ID", "condition", "exchangeinfo"))
view(d_exchangeinfo)
exchangeinfo_descriptive = d_exchangeinfo %>%
group_by(condition) %>%
summarize(Total = count(exchangeinfo),
Did_Exchange = count(exchangeinfo, 2),
Did_Not_Exchange = count(exchangeinfo, 1),
Percentage = (Did_Exchange/Did_Not_Exchange)*100))
exchangeinfo_descriptive = d_exchangeinfo %>%
group_by(condition) %>%
summarize(Total = count(exchangeinfo),
Did_Exchange = count(exchangeinfo, 2),
Did_Not_Exchange = count(exchangeinfo, 1),
Percentage = (Did_Exchange/Did_Not_Exchange)*100)
exchangeinfo_descriptive = d_exchangeinfo %>%
group_by(condition) %>%
summarize(Total = count(exchangeinfo))
view(d_exchangeinfo)
exchangeinfo_descriptive = d_exchangeinfo %>%
group_by(condition) %>%
summarize(Total = length(exchangeinfo))
exchangeinfo_descriptive
exchangeinfo_descriptive = d_exchangeinfo %>%
group_by(condition) %>%
summarize(Total = length(exchangeinfo),
Did_Exchange = count(exchangeinfo, vars = "2"))
exchangeinfo_descriptive
exchangeinfo_descriptive = d_exchangeinfo %>%
group_by(condition) %>%
summarize(Total = length(exchangeinfo),
Did_Exchange = length(which(exchangeinfo == 2)))
exchangeinfo_descriptive
exchangeinfo_descriptive = d_exchangeinfo %>%
group_by(condition) %>%
summarize(Total = length(exchangeinfo),
Did_Not_Exchange = length(which(exchangeinfo == 2)),
Did_Exchange = length(which(exchangeinfo == 1)),
Percentage_Exchanged = (Did_Exchange/Total)*100)
exchangeinfo_descriptive
chisq.test(exchangeinfo_descriptive)
table(d_exchangeinfo$condition, d_exchangeinfo$exchangeinfo)
table_of_exchanges = table(d_exchangeinfo$condition, d_exchangeinfo$exchangeinfo)
chisq.test(table_of_exchanges)
table_of_exchanges
table_of_exchanges = table(d_exchangeinfo$condition, d_exchangeinfo$exchangeinfo)
table_of_exchanges1 = table(d_exchangeinfo$exchangeinfo, d_exchangeinfo$condition)
chisq.test(table_of_exchanges)
chisq.test(table_of_exchanges1)
table_of_exchanges
chisq.test(table_of_exchanges, correct = "False")
chisq.test(table_of_exchanges, correct = False)
chisq.test(table_of_exchanges)
table_of_exchanges = table(d_exchangeinfo$condition, d_exchangeinfo$exchangeinfo, correct=FALSE)
chisq.test(table_of_exchanges)
table_of_exchanges = table(d_exchangeinfo$condition, d_exchangeinfo$exchangeinfo, correct=FALSE)
table_of_exchanges = table(d_exchangeinfo$condition, d_exchangeinfo$exchangeinfo, correct=F)
table_of_exchanges = table(d_exchangeinfo$condition, d_exchangeinfo$exchangeinfo)
chisq.test(table_of_exchanges, correct = F)
```{r global_options, include=FALSE}
```{r global_options, include=FALSE}
library(tidyverse) # for data munging
library(knitr) # for kable table formating
library(haven) # import and export 'SPSS', 'Stata' and 'SAS' Files
library(readxl) # import excel files
d <-read_csv("data/S1_voice_level_Final.csv")
d <-read_csv("data/S1_voice_level_Final.csv")
DT::datatable(d)
d <-read_csv("data/S1_voice_level_Final.csv")
library(tidyverse) # for data munging
library(knitr) # for kable table formating
library(haven) # import and export 'SPSS', 'Stata' and 'SAS' Files
library(readxl) # import excel files
files <- dir('data/Experiment 1')
data <- data.frame()
id <- 1
for (file in files){
if(file != 'Codebook.xls'){
temp_data <- read_xls(file.path('data/Experiment 1', file))
temp_data$id <- id
id <- id + 1
temp_data <- temp_data[1:250, ]
data <- rbind(data, temp_data)
}
}
names(data)
view(data)
data_RT = data %>%
select(c("ID", "TaskType", "TrialType", "RT"))
data_RT = data %>%
select(c("id", "TaskType", "TrialType", "RT"))
data$TrialType %>% unique()
data$TrialType %>% count(unique())
data$TrialType %>% count_() %>% unique()
data$TrialType %>% unique() %>% count_()
data %>% as.tibble() %>% count_(TrialType)
data %>% as.tibble() %>% count(TrialType)
data_RT = data %>%
select(c("id", "TaskType", "TrialType", "RT"))
data %>% as.tibble() %>% count(TaskType)
data_RT = data %>%
select(c("id", "TaskType", "TrialType", "RT")) %>%
filter(TrialType == 0)
data_RT %>% as.tibble() %>% count(TrialType)
data_RT = data %>%
select(c("id", "TaskType", "TrialType", "RT")) %>%
filter(!TrialType == 0)
data_RT %>% as.tibble() %>% count(TrialType)
data %>% as.tibble() %>% count(TrialType)
data_RT %>% as.tibble() %>% count(TrialType)
responsetime_averages = data_RT %>%
group_by(TrialType) %>%
summarize(MeanRT = mean(RT))
responsetime_averages
responsetime_averages = data_RT %>%
group_by(TaskType) %>%
summarize(MeanRT = mean(RT))
responsetime_averages
data_RT = data %>%
select(c("id", "TaskType", "TrialType", "RT"))
data_RT %>% as.tibble() %>% count(TrialType)
responsetime_averages = data_RT %>%
group_by(TaskType) %>%
summarize(MeanRT = mean(RT))
responsetime_averages
data_RT = data %>%
select(c("id", "TaskType", "TrialType", "RT")) %>%
filter(!TrialType == 0)
responsetime_averages = data_RT %>%
group_by(TrialType) %>%
summarize(MeanRT = mean(RT))
responsetime_averages
view(data_RT)
responsetime_averages = data_RT %>%
group_by(id, TrialType) %>%
summarize(MeanRT = mean(RT))
responsetime_averages
responsetime_averages = responsetime_individualaverages %>%
group_by(TrialType) %>%
summarize(Mean = mean(MeanRT))
responsetime_individualaverages = data_RT %>%
group_by(id, TrialType) %>%
summarize(MeanRT = mean(RT))
responsetime_averages
responsetime_averages %>% filter(TrialType == 1) %>% mean()
responsetime_averages
responsetime_averages %>% mean(TrialType == 1)
responsetime_averages = data_RT %>%
group_by(id, TrialType) %>%
summarize(MeanRT = mean(RT))
responsetime_averages = data_RT %>%
group_by(id, TrialType) %>%
summarize(MeanRT = mean(RT))
responsetime_averages
responsetime_averages = data_RT %>%
group_by(TrialType, id) %>%
summarize(MeanRT = mean(RT))
responsetime_averages
view(responsetime_averages)
trial2 = responsetime_averages %>% filter(TrialType == 1)
trial2
trial2 %>% mean(MeanRT)
view(responsetime_averages)
responsetime_averages
mean_trial2 = trial2 %>% mean(MeanRT)
mean_trial2
trial2
mean_trial2 = mean(trial2$MeanRT)
mean_trial2
trial1 = responsetime_averages %>% filter(TrialType == 1)
mean_trial1 = mean(trial1$MeanRT)
trial2 = responsetime_averages %>% filter(TrialType == 2)
mean_trial2 = mean(trial2$MeanRT)
mean_trial2
mean_trial1
responsetime_averages = data_RT %>%
group_by(TrialType, id) %>%
summarize(MeanRT = mean(RT))
trial1 = responsetime_averages %>% filter(TrialType == 1)
mean_trial1 = mean(trial1$MeanRT)
print("Repeat trials = " + mean_trial1)
trial1 = responsetime_averages %>% filter(TrialType == 1)
mean_trial1 = mean(trial1$MeanRT)
print("Repeat trials = " + str(mean_trial1))
trial1 = responsetime_averages %>% filter(TrialType == 1)
mean_trial1 = mean(trial1$MeanRT)
print("Repeat trials = " str(mean_trial1))
trial1 = responsetime_averages %>% filter(TrialType == 1)
mean_trial1 = mean(trial1$MeanRT)
print("Repeat trials = ")
mean_trial1
trial2 = responsetime_averages %>% filter(TrialType == 2)
mean_trial2 = mean(trial2$MeanRT)
print("Switch trials = ")
mean_trial2
trial1 = responsetime_averages %>% filter(TrialType == 1)
mean_trial1 = mean(trial1$MeanRT)
print(Repeat trials = )
trial1 = responsetime_averages %>% filter(TrialType == 1)
mean_trial1 = mean(trial1$MeanRT)
print("Repeat trials = ")
mean_trial1
trial2 = responsetime_averages %>% filter(TrialType == 2)
mean_trial2 = mean(trial2$MeanRT)
print("Switch trials = ")
mean_trial2
view(data)
data_RT = data %>%
select(c("id", "TaskType", "TrialType", "RT", "CorrResp", "RespCorr")) %>%
filter(!TrialType == 0)
responsetime_averages_aggregrate = data_RT %>%
group_by(TrialType) %>%
summarize(MeanRT = mean(RT))
responsetime_averages_aggregrate
mean_trial1
mean_trial2
responsetime_averages_aggregrate
trial1
mean(trial1$MeanRT)
responsetime_averages = data_RT %>%
group_by(TrialType) %>%
summarize(MedianRT = median(RT))
responsetime_averages
responsetime_averages = data_RT %>%
group_by(TrialType, id) %>%
summarize(MeanRT = mean(RT))
trial1 = responsetime_averages %>% filter(TrialType == 1)
median_trial1 = median(trial1$MeanRT)
print("Repeat trials = ")
median_trial1
trial2 = responsetime_averages %>% filter(TrialType == 2)
median_trial2 = median(trial2$MeanRT)
print("Switch trials = ")
median_trial2
responsetime_averages = data_RT %>%
group_by(TrialType, id) %>%
summarize(MedianRT = median(RT))
trial1 = responsetime_averages %>% filter(TrialType == 1)
mean_trial1 = mean(trial1$MedianRT)
print("Repeat trials = ")
mean_trial1
trial2 = responsetime_averages %>% filter(TrialType == 2)
mean_trial2 = mean(trial2$MedianRT)
print("Switch trials = ")
mean_trial2
responsetime_averages = data_RT %>%
group_by(TrialType, id) %>%
summarize(MedianRT = median(RT))
trial1 = responsetime_averages %>% filter(TrialType == 1)
median_trial1 = median(trial1$MedianRT)
print("Repeat trials = ")
median_trial1
trial2 = responsetime_averages %>% filter(TrialType == 2)
median_trial2 = median(trial2$MedianRT)
print("Switch trials = ")
median_trial2
responsetime_averages = data_RT %>%
group_by(TrialType) %>%
summarize(MedianRT = median(RT))
responsetime_averages
correct_percentage = data_RT %>%
group_by(TrialType, id) %>%
summarize(CorrResp)
correct_percentage
correct_percentage = data_RT %>%
group_by(TrialType, id) %>%
summarize(CorrResp, RespCorr)
correct_percentage
correct_percentage = data_RT %>%
group_by(TrialType, id) %>%
summarize(TotalCorrect = sum(CorrResp))
correct_percentage
trial1_rt = responsetime_averages %>% filter(TrialType == 1)
median_trial1 = median(trial1_rt$MedianRT)
print("Repeat trials = ")
median_trial1
trial2_rt = responsetime_averages %>% filter(TrialType == 2)
median_trial2 = median(trial2_rt$MedianRT)
print("Switch trials = ")
median_trial2
trial1_corr = correct_precentage %>% filter(TrialType == 1)
trial1_corr = correct_precentage %>% filter(TrialType == 1)
trial1_corr = correct_percentage %>% filter(TrialType == 1)
mean_trial1_corr = mean(trial1_corr$TotalCorrect)
mean_trial1_corr
trial1_corr = correct_percentage %>% filter(TrialType == 1)
median_trial1_corr = median(trial1_corr$TotalCorrect)
median_trial1_corr
trial2_corr = correct_percentage %>% filter(TrialType == 2)
median_trial2_corr = median(trial2_corr$TotalCorrect)
median_trial2_corr
trial2_corr = correct_percentage %>% filter(TrialType == 2)
mean_trial2_corr = mean(trial2_corr$TotalCorrect)
mean_trial2_corr
trial1_corr = correct_percentage %>% filter(TrialType == 1)
median_trial1_corr = median(trial1_corr$TotalCorrect)
median_trial1_corr
trial2_corr = correct_percentage %>% filter(TrialType == 2)
median_trial2_corr = median(trial2_corr$TotalCorrect)
median_trial2_corr
trial2_corr = correct_percentage %>% filter(TrialType == 2)
trial2_corr
trial1_corr = correct_percentage %>% filter(TrialType == 1)
trial1_corr = correct_percentage %>% filter(TrialType == 1)
trial1_corr
data_RT = data %>%
select(c("id", "TaskType", "TrialType", "RT", "CorrResp", "Prime")) %>%
filter(!TrialType == 0)
responsetime_prime_averages = data_RT %>%
group_by(Prime) %>%
summarize(MedianRT_prime = median(RT))
responsetime_prime_averages
correct_prime_percentage = data_RT %>%
group_by(Prime) %>%
summarize(TotalCorrect_prime = sum(CorrResp))
correct_prime_percentage
prime_nonpred_rt = responsetime_prime_averages %>% filter(Prime == "O")
mean_nonpred_rt = mean(prime_nonpred_rt$MedianRT_prime)
mean_nonpred_rt
prime_pred_rt = responsetime_prime_averages %>% filter(Prime == "M" & Prime == "T")
mean_pred_rt = mean(prime_pred_rt$MedianRT_prime)
mean_pred_rt
prime_pred_rt = responsetime_prime_averages %>% filter(Prime == "M" | Prime == "T")
mean_pred_rt = mean(prime_pred_rt$MedianRT_prime)
mean_pred_rt
mean_nonpred_rt
responsetime_prime_averages = data_RT %>%
group_by(Prime, id) %>%
summarize(MedianRT_prime = median(RT))
prime_nonpred_rt = responsetime_prime_averages %>% filter(Prime == "O")
mean_nonpred_rt = mean(prime_nonpred_rt$MedianRT_prime)
mean_nonpred_rt
prime_pred_rt = responsetime_prime_averages %>% filter(Prime == "M" | Prime == "T")
mean_pred_rt = mean(prime_pred_rt$MedianRT_prime)
mean_pred_rt
responsetime_prime_averages
correct_switchprime = data_RT %>%
group_by(TrialType, Prime) %>%
summarize(TotalCorrect = sum(CorrResp))
correct_switchprime
median_trial1_corr
